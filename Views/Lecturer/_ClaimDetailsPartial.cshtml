@model CMCS.Models.Claim

<div class="row">
    <div class="col-md-6">
        <h6>Claim Information</h6>
        <table class="table table-sm">
            <tr>
                <th>Reference:</th>
                <td>@Model.ClaimReference</td>
            </tr>
            <tr>
                <th>Period:</th>
                <td>@Model.MonthWorked/@Model.YearWorked</td>
            </tr>
            <tr>
                <th>Module:</th>
                <td>@Model.ModuleTaught</td>
            </tr>
            <tr>
                <th>Hours Worked:</th>
                <td>@Model.HoursWorked</td>
            </tr>
            <tr>
                <th>Hourly Rate:</th>
                <td>R @Model.HourlyRate</td>
            </tr>
            <tr>
                <th>Total Amount:</th>
                <td><strong>R @Model.TotalAmount</strong></td>
            </tr>
            <tr>
                <th>Status:</th>
                <td>
                    <span class="badge @GetStatusBadgeClass(Model.Status)">
                        @Model.Status
                    </span>
                </td>
            </tr>
        </table>
    </div>

    <div class="col-md-6">
        <h6>Timeline</h6>
        <table class="table table-sm">
            <tr>
                <th>Submitted:</th>
                <td>@Model.SubmissionDate.ToString("dd MMM yyyy HH:mm")</td>
            </tr>
            <tr>
                <th>Last Updated:</th>
                <td>@Model.LastModifiedDate.ToString("dd MMM yyyy HH:mm")</td>
            </tr>
        </table>

        @if (!string.IsNullOrEmpty(Model.AdditionalNotes))
        {
            <h6>Additional Notes</h6>
            <p class="text-muted">@Model.AdditionalNotes</p>
        }
    </div>
</div>

@if (Model.Documents.Any())
{
    <div class="row mt-3">
        <div class="col-12">
            <h6>Supporting Documents (@Model.Documents.Count)</h6>
            <div class="list-group">
                @foreach (var doc in Model.Documents)
                {
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <i class="fas fa-file @(doc.FileType == ".pdf" ? "text-danger" : doc.FileType == ".docx" ? "text-primary" : "text-success")"></i>
                            @doc.FileName
                            <br>
                            <small class="text-muted">
                                @doc.Description - @doc.FileSize bytes - @doc.UploadDate.ToString("dd MMM yyyy")
                            </small>
                        </div>
                        <div>
                            <a href="@Url.Action("DownloadDocument", new { documentId = doc.DocumentId })"
                               class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-download"></i>
                            </a>
                            <form asp-action="DeleteDocument" method="post" class="d-inline">
                                <input type="hidden" name="documentId" value="@doc.DocumentId" />
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-sm btn-outline-danger"
                                        onclick="return confirm('Are you sure you want to delete this document?')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (Model.Approvals.Any())
{
    <div class="row mt-3">
        <div class="col-12">
            <h6>Approval History</h6>
            <div class="timeline">
                @foreach (var approval in Model.Approvals.OrderBy(a => a.ReviewDate))
                {
                    <div class="timeline-item">
                        <div class="timeline-marker @(approval.Status == ApprovalStatus.APPROVED ? "bg-success" : approval.Status == ApprovalStatus.REJECTED ? "bg-danger" : "bg-warning")"></div>
                        <div class="timeline-content">
                            <h6>@approval.Level - @approval.Status</h6>
                            <p class="text-muted mb-1">By: @approval.Approver?.FirstName @approval.Approver?.LastName</p>
                            <p class="text-muted mb-1">Date: @approval.ReviewDate.ToString("dd MMM yyyy HH:mm")</p>
                            @if (!string.IsNullOrEmpty(approval.Comments))
                            {
                                <p class="mb-0"><strong>Comments:</strong> @approval.Comments</p>
                            }
                            @if (!string.IsNullOrEmpty(approval.RejectionReason))
                            {
                                <p class="mb-0 text-danger"><strong>Reason:</strong> @approval.RejectionReason</p>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<style>
    .timeline {
        position: relative;
        padding-left: 2rem;
    }

    .timeline-item {
        position: relative;
        margin-bottom: 1rem;
    }

    .timeline-marker {
        position: absolute;
        left: -2rem;
        top: 0.5rem;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
    }

    .timeline-content {
        padding: 0.5rem;
        background: #f8f9fa;
        border-radius: 0.25rem;
    }
</style>

@functions {
    public string GetStatusBadgeClass(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.PENDING => "bg-warning",
            ClaimStatus.APPROVED_PC => "bg-info",
            ClaimStatus.APPROVED_AM => "bg-primary",
            ClaimStatus.APPROVED_FINAL => "bg-success",
            ClaimStatus.PAID => "bg-success",
            ClaimStatus.REJECTED => "bg-danger",
            ClaimStatus.CANCELLED => "bg-secondary",
            _ => "bg-secondary"
        };
    }
}