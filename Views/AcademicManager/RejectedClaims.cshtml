@model IEnumerable<CMCS.Models.Claim>

@{
    ViewData["Title"] = "Rejected Claims";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card">
    <div class="card-header bg-danger text-white">
        <h3 class="card-title mb-0">
            <i class="fas fa-times-circle"></i> Rejected Claims
        </h3>
        <p class="card-subtitle mb-0 mt-1">Claims that have been rejected during the approval process</p>
    </div>
    <div class="card-body">
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-triangle"></i> @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h3 class="text-danger">@Model.Count()</h3>
                        <p class="text-muted mb-0">Total Rejected</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h3 class="text-warning">@(Model.Count(c => c.LastModifiedDate.Date == DateTime.Today))</h3>
                        <p class="text-muted mb-0">Rejected Today</p>
                    </div>
                </div>
            </div>
        </div>

        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="rejectedTable">
                    <thead class="table-danger">
                        <tr>
                            <th>Claim Reference</th>
                            <th>Lecturer</th>
                            <th>Month/Year</th>
                            <th>Hours</th>
                            <th>Amount</th>
                            <th>Rejection Date</th>
                            <th>Rejected By</th>
                            <th>Rejection Reason</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var claim in Model)
                        {
                            var monthYear = new DateTime(claim.YearWorked, claim.MonthWorked, 1).ToString("MMM yyyy");
                            var rejection = claim.Approvals?.FirstOrDefault(a => a.Status == ApprovalStatus.REJECTED);

                            <tr>
                                <td>
                                    <span class="badge bg-secondary">@claim.ClaimReference</span>
                                </td>
                                <td>
                                    <strong>@claim.Lecturer?.FirstName @claim.Lecturer?.LastName</strong>
                                    <br>
                                    <small class="text-muted">@claim.Lecturer?.Email</small>
                                </td>
                                <td>@monthYear</td>
                                <td>
                                    <span class="badge bg-info">@claim.HoursWorked.ToString("F1")</span>
                                </td>
                                <td>
                                    <strong class="text-success">R @claim.TotalAmount.ToString("F2")</strong>
                                </td>
                                <td>
                                    @if (rejection?.ApprovalDate != null)
                                    {
                                        <small>@rejection.ApprovalDate.Value.ToString("dd MMM yyyy HH:mm")</small>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">N/A</span>
                                    }
                                </td>
                                <td>
                                    @if (rejection?.Approver != null)
                                    {
                                        <small>@rejection.Approver.FirstName @rejection.Approver.LastName</small>
                                        <br>
                                        <small class="text-muted">@rejection.Level</small>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">Unknown</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(rejection?.RejectionReason))
                                    {
                                        <span class="rejection-reason" data-bs-toggle="tooltip"
                                              title="@rejection.RejectionReason">
                                            @(rejection.RejectionReason.Length > 50 ?
                                                                            rejection.RejectionReason.Substring(0, 50) + "..." :
                                                                            rejection.RejectionReason)
                            </span>
                                                        }
                                    else
                                    {
                                        <span class="text-muted">No reason provided</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-danger">@claim.Status</span>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="@Url.Action("ReviewClaim", new { id = claim.ClaimId })"
                                           class="btn btn-outline-primary" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <button type="button" class="btn btn-outline-info view-reason"
                                                data-reason="@rejection?.RejectionReason"
                                                title="View Full Reason">
                                            <i class="fas fa-comment"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Rejection Statistics -->
            <div class="row mt-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-warning text-dark">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-chart-pie"></i> Rejection Analysis
                            </h6>
                        </div>
                        <div class="card-body">
                            @{
                                var rejectionReasons = Model
                                .SelectMany(c => c.Approvals?.Where(a => a.Status == ApprovalStatus.REJECTED) ?? new List<ClaimApproval>())
                                .Where(a => !string.IsNullOrEmpty(a.RejectionReason))
                                .GroupBy(a => a.RejectionReason)
                                .OrderByDescending(g => g.Count())
                                .Take(5)
                                .ToList();
                            }

                            @if (rejectionReasons.Any())
                            {
                                <div class="list-group list-group-flush">
                                    @foreach (var reasonGroup in rejectionReasons)
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span class="reason-text">@reasonGroup.Key</span>
                                            <span class="badge bg-danger rounded-pill">@reasonGroup.Count()</span>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted text-center">No rejection reasons recorded</p>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-info text-white">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-user-times"></i> Rejection by Role
                            </h6>
                        </div>
                        <div class="card-body">
                            @{
                                var rejectionByRole = Model
                                .SelectMany(c => c.Approvals?.Where(a => a.Status == ApprovalStatus.REJECTED) ?? new List<ClaimApproval>())
                                .GroupBy(a => a.Level)
                                .Select(g => new { Role = g.Key, Count = g.Count() })
                                .OrderByDescending(x => x.Count)
                                .ToList();
                            }

                            @if (rejectionByRole.Any())
                            {
                                <div class="list-group list-group-flush">
                                    @foreach (var roleGroup in rejectionByRole)
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>@roleGroup.Role</span>
                                            <span class="badge bg-danger rounded-pill">@roleGroup.Count</span>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted text-center">No rejection data by role</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-times-circle fa-4x text-muted mb-3"></i>
                <h4 class="text-muted">No Rejected Claims</h4>
                <p class="text-muted">There are no rejected claims in the system.</p>
                <a href="@Url.Action("Dashboard")" class="btn btn-primary">
                    <i class="fas fa-arrow-left"></i> Back to Dashboard
                </a>
            </div>
        }
    </div>
</div>

<div class="mt-3">
    <a href="@Url.Action("Dashboard")" class="btn btn-secondary">
        <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
</div>

<!-- Modal for viewing full rejection reason -->
<div class="modal fade" id="reasonModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-comment"></i> Rejection Reason
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="fullReasonText" class="mb-0"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable
            $('#rejectedTable').DataTable({
                "pageLength": 25,
                "ordering": true,
                "searching": true,
                "responsive": true,
                "order": [[5, 'desc']], // Sort by Rejection Date descending
                "language": {
                    "search": "Search rejected claims:",
                    "lengthMenu": "Show _MENU_ claims per page",
                    "info": "Showing _START_ to _END_ of _TOTAL_ rejected claims"
                }
            });

            // Tooltip initialization
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            // View full rejection reason
            $('.view-reason').click(function() {
                var reason = $(this).data('reason') || 'No reason provided';
                $('#fullReasonText').text(reason);
                $('#reasonModal').modal('show');
            });
        });
    </script>

    <style>
        .table-danger th {
            background-color: #dc3545;
            color: white;
        }

        .rejection-reason {
            cursor: pointer;
            color: #6c757d;
        }

            .rejection-reason:hover {
                color: #495057;
                text-decoration: underline;
            }

        .reason-text {
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
    </style>
}