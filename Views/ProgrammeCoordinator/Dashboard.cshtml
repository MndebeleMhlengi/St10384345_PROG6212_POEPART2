@model IEnumerable<CMCS.Models.Claim>
@{
    ViewData["Title"] = "Programme Coordinator Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Programme Coordinator Dashboard</h1>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-white bg-warning">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Pending Review</h6>
                        <h3 class="mb-0">@ViewBag.TotalPending</h3>
                    </div>
                    <i class="fas fa-clock fa-2x opacity-50"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-success">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Approved</h6>
                        <h3 class="mb-0">@ViewBag.TotalApproved</h3>
                    </div>
                    <i class="fas fa-check-circle fa-2x opacity-50"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-tasks me-2"></i>Claims Requiring Review</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Lecturer</th>
                                <th>Claim Reference</th>
                                <th>Month/Year</th>
                                <th>Hours</th>
                                <th>Amount</th>
                                <th>Submitted</th>
                                <th>Documents</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model != null && Model.Any())
                            {
                                @foreach (var claim in Model)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <div class="fw-bold">@claim.LecturerId</div>
                                                    <small class="text-muted">@claim.Lecturer.Email</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td><strong>@claim.ClaimReference</strong></td>
                                        <td>@claim.MonthWorked/@claim.YearWorked</td>
                                        <td>@claim.HoursWorked h</td>
                                        <td>R@claim.TotalAmount.ToString("N2")</td>
                                        <td>
                                            <small>@claim.SubmissionDate.ToString("yyyy-MM-dd HH:mm")</small><br>
                                            <small class="text-muted">@((int)(DateTime.Now - claim.SubmissionDate).TotalDays) days ago</small>
                                        </td>
                                        <td>
                                            <span class="badge @(claim.Documents.Count >= 3 ? "bg-success" : "bg-warning")">
                                                @claim.Documents.Count docs
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group">
                                                <a href="@Url.Action("ReviewClaim", "ProgrammeCoordinator", new { id = claim.ClaimId })" class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-eye"></i> Review
                                                </a>
                                                <button type="button" class="btn btn-sm btn-success" onclick="approveClaim(@claim.ClaimId)">
                                                    <i class="fas fa-check"></i> Approve
                                                </button>
                                                <button type="button" class="btn btn-sm btn-danger" onclick="rejectClaim(@claim.ClaimId)">
                                                    <i class="fas fa-times"></i> Reject
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center text-muted">🎉 No pending claims for approval at the moment.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function approveClaim(claimId) {
            if (confirm('Are you sure you want to approve this claim?')) {
                fetch(`/ProgrammeCoordinator/ApproveClaim?claimId=${claimId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error approving claim');
                    }
                });
            }
        }

        function rejectClaim(claimId) {
            const reason = prompt('Please provide a reason for rejection:');
            if (reason) {
                fetch(`/ProgrammeCoordinator/RejectClaim?claimId=${claimId}&reason=${encodeURIComponent(reason)}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error rejecting claim');
                    }
                });
            }
        }
    </script>
}